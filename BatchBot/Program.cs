
using System;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Discord;
using Discord.WebSocket;
using Discord.Commands;
using BatchBot.BotModules;



namespace BatchBot
{
    class Program
    {

        /// <summary>
        /// The client
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _client
        private readonly DiscordSocketClient _client;

        /// <summary>
        /// The commands
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _commands
        private readonly CommandService _commands = new CommandService();
        
        /// <summary>
        /// The services
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _services
        private IServiceProvider _services;

        private ServiceCollection _map = new ServiceCollection();
        
        // Entry point (start here!)
        static void Main(string[] args)
            => new Program().MainAsync(args[0]).GetAwaiter().GetResult();

        /// <summary>
        /// Mostly just setup for read only stuff
        /// </summary>
        private Program()
        {
            _client = new DiscordSocketClient(new DiscordSocketConfig
            {
                // Set LogLevel to debug, since this is not for release, can be changed later
                LogLevel = LogSeverity.Debug,

                // Everyone needs a little cache
                // Fairly low because this bot does a few things, MANY times
                MessageCacheSize = 20,
            });

            _client.Log += Log;
            _commands.Log += Log;
        }

        /// <summary>
        /// The replacement of Main() because everything is async with bots
        /// </summary>
        /// <param name="arg">The Bots Token, is added as a command line argument for security reasons</param>
        private async Task MainAsync(string arg)
        {

            

            await InitCommands();
            
            await _client.LoginAsync(TokenType.Bot, arg, true);

            await _client.StartAsync();

            await Task.Delay(-1);
        }
        
        

        /// <summary>
        /// Initializes the commands.
        /// </summary>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for InitCommands
        private async Task InitCommands()
        {
            _map.AddSingleton(_client);
            _map.AddSingleton(_commands);

            _services = _map.BuildServiceProvider();
            
            //await _commands.AddModulesAsync(Assembly.GetExecutingAssembly());

            await _commands.AddModuleAsync<BotModules.BatchAdmin>();

            _client.MessageReceived += HandleCommandAsync;
        }

        private async Task HandleCommandAsync(SocketMessage arg)
        {
            // if its a system message, bail out faster than that time you found out "she" was a he
            var msg = arg as SocketUserMessage;
            if (msg == null) return;

            if (msg.Author.Id == _client.CurrentUser.Id || msg.Author.IsBot) return;

            int pos = 0;

            if (!(msg.HasCharPrefix('/', ref pos) || msg.HasMentionPrefix(_client.CurrentUser, ref pos))) return;
            
            var context = new SocketCommandContext(_client, msg);

            var result = await _commands.ExecuteAsync(context, pos, _services);


            if(!result.IsSuccess)
            {
                await context.Channel.SendMessageAsync(result.ErrorReason, false);
                return;
            }


            await Log(new LogMessage(LogSeverity.Info, "HandleCommandAsync()", $"{context.User} used command {msg.Content.Substring(pos)} on {context.Guild.Name}"));
            
        }

        /// <summary>
        /// The logging system
        /// </summary>
        /// <param name="msg">The message that gets formatted into the log</param>
        private Task Log(LogMessage msg)
        {

            // Pretty colours!
            switch (msg.Severity)
            {
                case LogSeverity.Critical:
                case LogSeverity.Error:
                    Console.ForegroundColor = ConsoleColor.Red;
                    break;
                case LogSeverity.Warning:
                    Console.ForegroundColor = ConsoleColor.Yellow;
                    break;
                case LogSeverity.Info:
                    Console.ForegroundColor = ConsoleColor.White;
                    break;
                case LogSeverity.Verbose:
                case LogSeverity.Debug:
                    Console.ForegroundColor = ConsoleColor.Cyan;
                    Console.BackgroundColor = ConsoleColor.DarkGray;
                    break;

            }
            Console.WriteLine($"{DateTime.Now,-19} [{msg.Severity}] {msg.Source}: {msg.Message}");
            Console.ResetColor();
            return Task.CompletedTask;
        }
    }
}
