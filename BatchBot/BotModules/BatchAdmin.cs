using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Discord;
using Discord.Commands;
using Discord.WebSocket;

namespace BatchBot.BotModules
{

    /// <summary>
    /// The main class of the BatchAdmin Module
    /// </summary>
    /// <seealso cref="Discord.Commands.ModuleBase{Discord.Commands.SocketCommandContext}" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for BatchAdmin
    public class BatchAdmin : ModuleBase<SocketCommandContext>
    {
        [Command("Role_Kick")]
        [Summary("Kicks all members of a given role")]
        [RequireUserPermission(GuildPermission.Administrator)]
        [RequireBotPermission(GuildPermission.KickMembers)]
        public async Task Role_Kick([Summary("The Role to loop through to kick all members with said Role")] IRole role, [Summary("The reason that is put in the audit log")]string reason)
        {
            // bail the fuck out if the role specified isnt for the server the command is being called on
            //if (role.Guild != Context.Guild) return;
            IGuildUser[] userArray;
            // make sure we have all the members of the server to search through
            //await Context.Guild.DownloadUsersAsync();
            userArray = Context.Guild.Users as IGuildUser[];
            for (int user = 0; user < Context.Guild.MemberCount; user++)
            {
                IReadOnlyCollection<ulong> roles = userArray[user].RoleIds;
                foreach (var item in roles)
                {
                    if (item == role.Id)
                    {
                        //await userArray[user].KickAsync(reason);
                        await ReplyAsync($"{userArray[user].Discriminator} was about to be kicked! Good thing debug builds exist!");
                            
                    }
                }
            }
            await ReplyAsync("Done?");
        }
        
    }
}
